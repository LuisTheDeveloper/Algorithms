// this function execute the code and records the function perfomance time
function run_function(func, test_values) {
  console.clear();
  for (var i in test_values) {
    console.log("Test value:", test_values[i]);
    var t0 = Date.now();
    console.log("Output:", func(test_values[i]));
    var t1 = Date.now();
    console.log("Took " + (t1 - t0) + " ms");
    console.log();
  }
}

// Start of the cases.

// 1. If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
// The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
const Multiples = () => {
  let n = 1;
  let sumTot = 0;

  while (n < 1000) {
    sumTot += n % 3 === 0 ? n : n % 5 === 0 ? n : 0;
    n++;
  }
  return sumTot;
};

// 2. Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.
const Fibonacci = (num, onlyOdd) => {
  let previous = 0;
  let sumTot = 1;
  let temp = 0;
  let n = 1;
  let tempArr = [];

  if (onlyOdd) {
    while (n <= num) {
      temp = sumTot;
      sumTot += previous;
      previous = temp;
      tempArr.push(sumTot);
      n++;
    }
    let oddArr = tempArr.filter((x) => x % 2 === 0);
    return oddArr.reduce((x, y) => x + y);
  } else {
    while (n <= num) {
      temp = sumTot;
      sumTot += previous;
      previous = temp;
      n++;
    }
  }

  return sumTot;
};

// Recursive
function Rfibonacci(num) {
  if (num <= 1) return 1;
  return Rfibonacci(num - 1) + Rfibonacci(num - 2);
}

// Using Memoization to speed up the function
function Mfibonacci(num, memo) {
  memo = memo || {};

  if (memo[num]) return memo[num];
  if (num <= 1) return 1;

  return (memo[num] = Mfibonacci(num - 1, memo) + Mfibonacci(num - 2, memo));
}

const Fibonacci2 = (num) => {
  const limit = num;
  let sum = 0;
  let a = 1;
  let b = 1;
  while (b < limit) {
    if (b % 2 === 0) {
      sum += b;
    }
    h = a + b;
    a = b;
    b = h;
  }
  return sum;
};

// 3. Largest Prime Factor
// The prime factors of 13195 are 5, 7, 13 and 29
// What is the largest prime factor of the number 600851475143 ?
const getPrimeFactorsFor = (num) => {
  const primes = [];
  for (let factor = 2; factor <= num; factor++) {
    while (num % factor === 0) {
      primes.push(factor);
      num /= factor;
    }
  }
  return primes;
};

// Another approach
const getPrimeFactorsFor2 = (num) => {
  let newnumm = num;
  let largestFact = 0;

  let counter = 2;
  while (counter * counter <= newnumm) {
    if (newnumm % counter === 0) {
      newnumm = newnumm / counter;
      largestFact = counter;
    } else {
      counter++;
    }
  }
  if (newnumm > largestFact) {
    // the remainder is a prime number
    largestFact = newnumm;
  }
  return largestFact;
};

// 4. Check the largest Palindrome betwen n-digits numbers
// 4.1. Check if a given number is a Palindrome:
const isPalindrome = (x) => {
  if (x < 0) return false;

  let reversed = 0,
    y = x;

  while (y > 0) {
    const lastDigit = y % 10;
    reversed = reversed * 10 + lastDigit;
    y = (y / 10) | 0;
  }
  return x === reversed;
};

// 4.22. Get the largest Palindrome from a range of numbers:
const checkIsPalindrome = () => {
  let largest = 0;
  for (i = 999; i > 99; i--) {
    for (j = 999; j > 99; j--) {
      let mult = i * j;
      if (mult < largest) break;
      largest = isPalindrome(mult) && mult > largest ? mult : largest;
    }
  }
  return largest;
};

// 5. Smallest Multiple
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
function smallestMult(n) {
  var prime_numbers = generate_prime_from_less_than_n(n);
  console.log("prime numbers:", prime_numbers);

  var multiply_them = prime_numbers.reduce(function (product, prime) {
    return product * Math.pow(prime, Math.floor(Math.log(n) / Math.log(prime)));
  }, 1);

  return multiply_them;
}

// generate and return prime numbers less than `n`
// skipping all even numbers because `2` is the only even prime number
function generate_prime_from_less_than_n(n) {
  var list_of_prime_nums = [2];
  for (var i = 3; i <= n; i += 2) {
    var is_prime = true;
    for (var j = 0; j < list_of_prime_nums.length; j++) {
      var check_is_prime = i % list_of_prime_nums[j];
      if (check_is_prime === 0) {
        is_prime = false;
        break;
      }
    }
    if (is_prime) {
      list_of_prime_nums.push(i);
    }
  }
  return list_of_prime_nums;
}

// 6. Sum Square Difference
// The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ... + 10^2 = 385
// The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)^2 = 55^2 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
// 3025 - 385 = 2640
//
// Find the difference between the sum of the squares of the first one hundred natural numbers
// and the square of the sum.
const DifferenceSumSquaresSquareSum = (num) => {
  let i = 1;
  let sumSquares = 0;
  let squareSums = 0;

  while (i <= num) {
    let a = Math.pow(i, 2);
    sumSquares += a;
    squareSums += i;
    i++;
  }
  squareSums = Math.pow(squareSums, 2);
  return squareSums - sumSquares;
};

// 7. By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13
// What is the 10 001st prime number?
const GetPrimeNumber = (num) => {
  var list_of_prime_nums = [2];
  var i = 3;

  while (list_of_prime_nums.length < num) {
    var is_prime = true;
    for (var j = 0; j < list_of_prime_nums.length; j++) {
      var check_is_prime = i % list_of_prime_nums[j];
      if (check_is_prime === 0) {
        is_prime = false;
        break;
      }
    }
    if (is_prime) {
      list_of_prime_nums.push(i);
    }
    i += 2;
  }
  return list_of_prime_nums[num - 1];
};

// 8. Largest Product in a Series
// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product:
// 73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450
// What is the value of this product?

const GetGreatestProduct = () => {
  const bigNumber =
    "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
  let num = 0;
  let largest = 0;
  let i = 0;

  for (i = 0; i <= bigNumber.length - 12; i++) {
    //console.log(parseInt(bigNumber.slice(i, 2)));
    num =
      parseInt(bigNumber.substr(i, 1)) *
      parseInt(bigNumber.substr(i + 1, 1)) *
      parseInt(bigNumber.substr(i + 2, 1)) *
      parseInt(bigNumber.substr(i + 3, 1)) *
      parseInt(bigNumber.substr(i + 4, 1)) *
      parseInt(bigNumber.substr(i + 5, 1)) *
      parseInt(bigNumber.substr(i + 6, 1)) *
      parseInt(bigNumber.substr(i + 7, 1)) *
      parseInt(bigNumber.substr(i + 8, 1)) *
      parseInt(bigNumber.substr(i + 9, 1)) *
      parseInt(bigNumber.substr(i + 10, 1)) *
      parseInt(bigNumber.substr(i + 11, 1)) *
      parseInt(bigNumber.substr(i + 12, 1));

    if (num > largest) {
      largest = num;
    }
  }

  return largest;
};

// 9. Special Pythagorean triplet
// A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a2 + b2 = c2
// For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
// Find the product abc

// ********* TODO ************

// 10. Summation of primes
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17
// Find the sum of all the primes below two million.
const SumPrimeNumbers = (num) => {
  var list_of_prime_nums = [2];

  for (i = 3; i <= num; i += 2) {
    var is_prime = true;
    for (var j = 0; j < list_of_prime_nums.length; j++) {
      var check_is_prime = i % list_of_prime_nums[j];
      if (check_is_prime === 0) {
        is_prime = false;
        break;
      }
    }
    if (is_prime) {
      list_of_prime_nums.push(i);
    }
  }
  return list_of_prime_nums.reduce((acc, num) => acc + num);
};

//

// list of numbers we wanna test
var test_values = [199];
// Here we call the function we want to use and pass the test values:
run_function(SumPrimeNumbers, test_values);
